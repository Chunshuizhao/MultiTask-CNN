name: "MultiPIE_CASIANet_bn_4"
layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "examples/MultiPIE/data_norm/face_train.txt"
    batch_size: 4
    shuffle: true
  }
}

layer {
  name: "slice1"
  type: "Slice"
  bottom: "label"
  top: "label_id"
  top: "label_pos"
  top: "label_exp"
  top: "label_illum"
  top: "label_cam"
  slice_param{
    slice_dim: 1
  }
}

layer {
  name: "conv11"
  type: "Convolution"
  bottom: "data"
  top: "conv11"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv11"
  type: "BatchNorm"
  bottom: "conv11"
  top: "conv11"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv11"
  type: "Scale"
  bottom: "conv11"
  top: "conv11"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu11"
  type: "ReLU"
  bottom: "conv11"
  top: "conv11"
}
layer {
  name: "conv12"
  type: "Convolution"
  bottom: "conv11"
  top: "conv12"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv12"
  type: "BatchNorm"
  bottom: "conv12"
  top: "conv12"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv12"
  type: "Scale"
  bottom: "conv12"
  top: "conv12"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu12"
  type: "ReLU"
  bottom: "conv12"
  top: "conv12"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv12"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv21"
  type: "Convolution"
  bottom: "pool1"
  top: "conv21"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv21"
  type: "BatchNorm"
  bottom: "conv21"
  top: "conv21"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv21"
  type: "Scale"
  bottom: "conv21"
  top: "conv21"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu21"
  type: "ReLU"
  bottom: "conv21"
  top: "conv21"
}
layer {
  name: "conv22"
  type: "Convolution"
  bottom: "conv21"
  top: "conv22"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv22"
  type: "BatchNorm"
  bottom: "conv22"
  top: "conv22"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv22"
  type: "Scale"
  bottom: "conv22"
  top: "conv22"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu22"
  type: "ReLU"
  bottom: "conv22"
  top: "conv22"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv22"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv31"
  type: "Convolution"
  bottom: "pool2"
  top: "conv31"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv31"
  type: "BatchNorm"
  bottom: "conv31"
  top: "conv31"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv31"
  type: "Scale"
  bottom: "conv31"
  top: "conv31"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu31"
  type: "ReLU"
  bottom: "conv31"
  top: "conv31"
}
layer {
  name: "conv32"
  type: "Convolution"
  bottom: "conv31"
  top: "conv32"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv32"
  type: "BatchNorm"
  bottom: "conv32"
  top: "conv32"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv32"
  type: "Scale"
  bottom: "conv32"
  top: "conv32"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu32"
  type: "ReLU"
  bottom: "conv32"
  top: "conv32"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv32"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layer {
  name: "conv41"
  type: "Convolution"
  bottom: "pool3"
  top: "conv41"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv41"
  type: "BatchNorm"
  bottom: "conv41"
  top: "conv41"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv41"
  type: "Scale"
  bottom: "conv41"
  top: "conv41"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu41"
  type: "ReLU"
  bottom: "conv41"
  top: "conv41"
}
layer {
  name: "conv42"
  type: "Convolution"
  bottom: "conv41"
  top: "conv42"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv42"
  type: "BatchNorm"
  bottom: "conv42"
  top: "conv42"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv42"
  type: "Scale"
  bottom: "conv42"
  top: "conv42"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu42"
  type: "ReLU"
  bottom: "conv42"
  top: "conv42"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv42"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
    pad: 1
  }
}
layer {
  name: "conv51"
  type: "Convolution"
  bottom: "pool4"
  top: "conv51"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv51"
  type: "BatchNorm"
  bottom: "conv51"
  top: "conv51"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv51"
  type: "Scale"
  bottom: "conv51"
  top: "conv51"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu51"
  type: "ReLU"
  bottom: "conv51"
  top: "conv51"
}
layer {
  name: "conv52"
  type: "Convolution"
  bottom: "conv51"
  top: "conv52"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv52"
  type: "BatchNorm"
  bottom: "conv52"
  top: "conv52"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv52"
  type: "Scale"
  bottom: "conv52"
  top: "conv52"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv52"
  top: "pool5"
  pooling_param {
    pool: AVE
    kernel_size: 7
  }
}
layer {
  name: "drop5"
  type: "Dropout"
  bottom: "pool5"
  top: "pool5"
  dropout_param {
    dropout_ratio: 0.4
  }
}
layer {
  name: "fc6_id"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6_id"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 200
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv51_mt"
  type: "Convolution"
  bottom: "pool4"
  top: "conv51_mt"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv51_mt"
  type: "BatchNorm"
  bottom: "conv51_mt"
  top: "conv51_mt"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv51_mt"
  type: "Scale"
  bottom: "conv51_mt"
  top: "conv51_mt"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu51_mt"
  type: "ReLU"
  bottom: "conv51_mt"
  top: "conv51_mt"
}
layer {
  name: "conv52_mt"
  type: "Convolution"
  bottom: "conv51_mt"
  top: "conv52_mt"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv52_mt"
  type: "BatchNorm"
  bottom: "conv52_mt"
  top: "conv52_mt"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv52_mt"
  type: "Scale"
  bottom: "conv52_mt"
  top: "conv52_mt"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "pool5_mt"
  type: "Pooling"
  bottom: "conv52_mt"
  top: "pool5_mt"
  pooling_param {
    pool: AVE
    kernel_size: 7
  }
}
layer {
  name: "drop5_mt"
  type: "Dropout"
  bottom: "pool5_mt"
  top: "pool5_mt"
  dropout_param {
    dropout_ratio: 0.4
  }
}
layer {
  name: "fc6_pos"
  type: "InnerProduct"
  bottom: "pool5_mt"
  top: "fc6_pos"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 13
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "fc6_exp"
  type: "InnerProduct"
  bottom: "pool5_mt"
  top: "fc6_exp"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "fc6_illum"
  type: "InnerProduct"
  bottom: "pool5_mt"
  top: "fc6_illum"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 19
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "prob_id"
  type: "Softmax"
  bottom: "fc6_id"
  top: "prob_id"
}
layer {
  name: "prob_pos"
  type: "Softmax"
  bottom: "fc6_pos"
  top: "prob_pos"
}
layer {
  name: "prob_exp"
  type: "Softmax"
  bottom: "fc6_exp"
  top: "prob_exp"
}
layer {
  name: "prob_illum"
  type: "Softmax"
  bottom: "fc6_illum"
  top: "prob_illum"
}
layer {
  name: "accuracy_id"
  type: "Accuracy"
  bottom: "prob_id"
  bottom: "label_id"
  top: "accuracy_id"
}
layer {
  name: "accuracy_pos"
  type: "Accuracy"
  bottom: "prob_pos"
  bottom: "label_pos"
  top: "accuracy_pos"
}
layer {
  name: "accuracy_exp"
  type: "Accuracy"
  bottom: "prob_exp"
  bottom: "label_exp"
  top: "accuracy_exp"
}
layer {
  name: "accuracy_illum"
  type: "Accuracy"
  bottom: "prob_illum"
  bottom: "label_illum"
  top: "accuracy_illum"
}
layer {
  name: "loss_id"
  type: "SoftmaxWithLoss"
  bottom: "fc6_id"
  bottom: "label_id"
  top: "loss_id"
}
layer {
  name: "loss_pos"
  type: "SoftmaxWithLoss"
  bottom: "fc6_pos"
  bottom: "label_pos"
  top: "loss_pos"
  loss_weight: 0.5
}
layer {
  name: "loss_exp"
  type: "SoftmaxWithLoss"
  bottom: "fc6_exp"
  bottom: "label_exp"
  top: "loss_exp"
  loss_weight: 0.5
}
layer {
  name: "loss_illum"
  type: "SoftmaxWithLoss"
  bottom: "fc6_illum"
  bottom: "label_illum"
  top: "loss_illum"
  loss_weight: 0.5
}
layer {
  name: "batches_train"
  type: "BatchSplit"
  bottom: "pool4"
  bottom: "label_pos"
  top: "pool4_batch1"
  top: "pool4_batch2"
  top: "pool4_batch3"
  include {
    phase: TRAIN
  }
  batch_split_param {
    emptyfill: 0
    backward: true
    split_threshold: 3
    split_threshold: 8
  }
}
layer {
  name: "labels_train"
  type: "BatchSplit"
  bottom: "label_id"
  bottom: "label_pos"
  top: "label_batch1"
  top: "label_batch2"
  top: "label_batch3"
  include {
    phase: TRAIN
  }
  batch_split_param {
    emptyfill: -1
    backward: false
    split_threshold: 3
    split_threshold: 8
  }
}
layer {
  name: "conv51_batch1"
  type: "Convolution"
  bottom: "pool4_batch1"
  top: "conv51_batch1"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv51_batch1"
  type: "BatchNorm"
  bottom: "conv51_batch1"
  top: "conv51_batch1"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv51_batch1"
  type: "Scale"
  bottom: "conv51_batch1"
  top: "conv51_batch1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu51_batch1"
  type: "ReLU"
  bottom: "conv51_batch1"
  top: "conv51_batch1"
}
layer {
  name: "conv52_batch1"
  type: "Convolution"
  bottom: "conv51_batch1"
  top: "conv52_batch1"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv52_batch1"
  type: "BatchNorm"
  bottom: "conv52_batch1"
  top: "conv52_batch1"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv52_batch1"
  type: "Scale"
  bottom: "conv52_batch1"
  top: "conv52_batch1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "pool5_batch1"
  type: "Pooling"
  bottom: "conv52_batch1"
  top: "pool5_batch1"
  pooling_param {
    pool: AVE
    kernel_size: 7
  }
}
layer {
  name: "drop5_batch1"
  type: "Dropout"
  bottom: "pool5_batch1"
  top: "pool5_batch1"
  dropout_param {
    dropout_ratio: 0.4
  }
}
layer {
  name: "conv51_batch2"
  type: "Convolution"
  bottom: "pool4_batch2"
  top: "conv51_batch2"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv51_batch2"
  type: "BatchNorm"
  bottom: "conv51_batch2"
  top: "conv51_batch2"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv51_batch2"
  type: "Scale"
  bottom: "conv51_batch2"
  top: "conv51_batch2"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu51_batch2"
  type: "ReLU"
  bottom: "conv51_batch2"
  top: "conv51_batch2"
}
layer {
  name: "conv52_batch2"
  type: "Convolution"
  bottom: "conv51_batch2"
  top: "conv52_batch2"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv52_batch2"
  type: "BatchNorm"
  bottom: "conv52_batch2"
  top: "conv52_batch2"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv52_batch2"
  type: "Scale"
  bottom: "conv52_batch2"
  top: "conv52_batch2"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "pool5_batch2"
  type: "Pooling"
  bottom: "conv52_batch2"
  top: "pool5_batch2"
  pooling_param {
    pool: AVE
    kernel_size: 7
  }
}
layer {
  name: "drop5_batch2"
  type: "Dropout"
  bottom: "pool5_batch2"
  top: "pool5_batch2"
  dropout_param {
    dropout_ratio: 0.4
  }
}
layer {
  name: "conv51_batch3"
  type: "Convolution"
  bottom: "pool4_batch3"
  top: "conv51_batch3"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv51_batch3"
  type: "BatchNorm"
  bottom: "conv51_batch3"
  top: "conv51_batch3"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv51_batch3"
  type: "Scale"
  bottom: "conv51_batch3"
  top: "conv51_batch3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu51_batch3"
  type: "ReLU"
  bottom: "conv51_batch3"
  top: "conv51_batch3"
}
layer {
  name: "conv52_batch3"
  type: "Convolution"
  bottom: "conv51_batch3"
  top: "conv52_batch3"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bn_conv52_batch3"
  type: "BatchNorm"
  bottom: "conv52_batch3"
  top: "conv52_batch3"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "scale_conv52_batch3"
  type: "Scale"
  bottom: "conv52_batch3"
  top: "conv52_batch3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "pool5_batch3"
  type: "Pooling"
  bottom: "conv52_batch3"
  top: "pool5_batch3"
  pooling_param {
    pool: AVE
    kernel_size: 7
  }
}
layer {
  name: "drop5_batch3"
  type: "Dropout"
  bottom: "pool5_batch3"
  top: "pool5_batch3"
  dropout_param {
    dropout_ratio: 0.4
  }
}
layer {
  name: "batchmerge_train"
  type: "BatchMerge"
  bottom: "label_pos"
  bottom: "pool5_batch1"
  bottom: "pool5_batch2"
  bottom: "pool5_batch3"
  top: "pool5_merge"
  include {
    phase: TRAIN
  }
  batch_merge_param {
    emptyfill: 0
    backward: true
    merge_threshold: 3
    merge_threshold: 8
  }
}
layer {
  name: "labelmerge_train"
  type: "BatchMerge"
  bottom: "label_pos"
  bottom: "label_batch1"
  bottom: "label_batch2"
  bottom: "label_batch3"
  top: "label_merge"
  include {
    phase: TRAIN
  }
  batch_merge_param {
    emptyfill: -1
    backward: false
    merge_threshold: 3
    merge_threshold: 8
  }
}
layer {
  name: "fc6_merge"
  type: "InnerProduct"
  bottom: "pool5_merge"
  top: "fc6_merge"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 200
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "prob_merge"
  type: "Softmax"
  bottom: "fc6_merge"
  top: "prob_merge"
}
layer {
  name: "accuracy_merge"
  type: "Accuracy"
  bottom: "prob_merge"
  bottom: "label_merge"
  top: "accuracy_merge"
  accuracy_param {
    ignore_label: -1
  }
}
layer {
  name: "loss_merge"
  type: "SoftmaxWithLoss"
  bottom: "fc6_merge"
  bottom: "label_merge"
  top: "loss_merge"
  loss_param {
    ignore_label: -1
  }
}
layer {
  name: "useless"
  type: "UselessTop"
  bottom: "label_cam"
  top: "useless"
}
